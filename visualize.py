#!/usr/bin/env python3

import pandas as pd
import matplotlib.pyplot as plt
from pandasql import sqldf
sql=lambda q: sqldf(q,globals())
import re

from PIL import Image
import os
from PyPDF2 import PdfFileReader, PdfFileWriter

bank = input("Enter Bank: ").lower()
df = pd.read_csv(str(bank)+".csv")
c = input("Would you like to give a date range? Y/N: ").lower()
if c == "y":
    start = str(input("Start Date (dd/mm/yyyy) : "))
    end = str(input("End Date (dd/mm/yyyy) : "))
    try:
        start_index = df[df["Transaction_Date"]==start].index.values[0]
        end_index = df[df["Transaction_Date"]==end].index.values[-1]
        if start_index<end_index:
            df = df[start_index:end_index]
        else:
            df = df[end_index:start_index]
    except:
        start_index = df[df["Transaction_Date"]==start].index.values
        end_index = df[df["Transaction_Date"]==end].index.values
        if start_index<end_index:
            df = df[start_index:end_index]
        else:
            df = df[end_index:start_index]

"""
print("Inside except")
print(start_index)
print(end_index)
"""


#Pie Chart Visualization of Payment Area

df_pay_area = sql("""
SELECT `Payment_Area`,COUNT(*) as Total
FROM df
where `Transaction_Date`
group by `Payment_Area`
order by Total desc
limit 6
""")

df_pay_area.set_index("Payment_Area",inplace=True)
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0,0.1, 0,0.1, 0] # ratio for each continent with which to offset each wedge.
plt.rcParams.update({'font.size': 13})

try:
    df_pay_area['Total'].plot(kind='pie',
                                figsize=(15, 6),
                                autopct='%1.1f%%',
                                startangle=90,
                                shadow=True,
                                labels=None,         # turn off labels on pie chart
                                pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct
                                colors=colors_list,  # add custom colors
                                explode=explode_list # 'explode' lowest 3 payment types
                                )
except:
    df_pay_area['Total'].plot(kind='pie',
                                figsize=(15, 6),
                                autopct='%1.1f%%',
                                startangle=90,
                                shadow=True,
                                labels=None,         # turn off labels on pie chart
                                pctdistance=1.12   # the ratio between the center of each pie slice and the start of the text generated by autopct
                                  # add custom colors
                                 # 'explode' lowest 3 payment types
                                )
# scale the title up by 12% to match pctdistance
plt.title('Distribution by Payment Area', y=1.05)
plt.axis('equal')
# add legend
plt.legend(labels=df_pay_area.index, loc='upper left')
plt.savefig("pay_area.png")
print("1/4 Analysis Done!!")
image1 = Image.open("pay_area.png")
im1 = image1.convert("RGB")
plt.close()



#Bar graph for Top 6 Debits
df_from_debit = sql("""
SELECT `From`,SUM(`Debit`) as Total
FROM df
group by `From`
order by Total desc
limit 6
""")

df_from_debit.set_index("From",inplace=True)
df_from_debit.plot(kind='bar')

plt.rcParams.update({'font.size': 17})
plt.ylabel("Total Amount Debited")
plt.xlabel("Entity")
plt.savefig("Debit.png",bbox_inches = 'tight')
print("2/4 Analysis Done!!")
image2 = Image.open("Debit.png")
im2 = image2.convert("RGB")
plt.close()



#Bar graph for Top 6 Credits
df_from_credit = sql("""
SELECT `Class`,SUM(`Credit`) as Total
FROM df
group by `Class`
order by Total desc
limit 6
""")

df_from_credit.set_index("Class",inplace=True)
df_from_credit.plot(kind='bar')

plt.rcParams.update({'font.size': 17})
plt.ylabel("Total Amount Credited")
plt.xlabel("Entity")
plt.savefig("Credit.png",bbox_inches = 'tight')
print("3/4 Analysis Done!!")
image3 = Image.open("Credit.png")
im3 = image3.convert("RGB")
plt.close()



#Bar graph for each month expenses
df_month = sql("""
select substr(`Transaction_Date`,4,6) as Month,sum(`Debit`) as Debit,sum(`Credit`) as Credit
from df
group by Month
order by `Transaction_Date`
limit 15
""")
df_month.set_index("Month",inplace=True)
df_month.plot(kind='bar')

plt.rcParams.update({'font.size': 17})
plt.rcParams["figure.figsize"] = (10,10)
plt.ylabel("Total Amount")
plt.xlabel("Entity")

plt.savefig("Expenses by Month.png",bbox_inches = 'tight')
print("4/4 Analysis Done!!")
image4 = Image.open("Expenses by Month.png")
im4 = image4.convert("RGB")
plt.close()

img_list = [im2,im3,im4]

im1.save("Analysis.pdf",save_all=True, append_images=img_list)

os.remove("pay_area.png")
os.remove("Debit.png")
os.remove("Credit.png")
os.remove("Expenses by Month.png")

password = input("Enter password for Report: ")

out = PdfFileWriter()
file = PdfFileReader("Analysis.pdf")
num = file.numPages

for idx in range(num):
    page = file.getPage(idx)
    out.addPage(page)

out.encrypt(password)
# Open a new file "myfile_encrypted.pdf"
with open("Analysis-encrypted.pdf", "wb") as f:
    out.write(f)

os.remove("Analysis.pdf")
print("Visualization was done successfully!!")
